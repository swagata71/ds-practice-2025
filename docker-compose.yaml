version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 3000 of the container to port 8080 on the host
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src

  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the transaction_verification directorys
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      # Expose port 50052 on the host, and map port 50052 of the container to port 50052 on the host
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the transaction_verification directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the transaction_verification/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src

  suggestions:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the suggestions directorys
      dockerfile: ./suggestions/Dockerfile
    ports:
      # Expose port 50052 on the host, and map port 50052 of the container to port 50052 on the host
      - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the suggestions directory to see how this is used
      - PYTHONFILE=/app/suggestions/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the suggestions/src directory in the current directory to the /app/suggestions/src directory in the container
      - ./suggestions/src:/app/suggestions/src
  order_executor_1:
    build:
      context: .
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50054:50054"
    environment:
      - REPLICA_ID=1
      - REPLICA_PORT=50054
      - PYTHONUNBUFFERED=TRUE
      - PEERS=2:order_executor_2:50055,3:order_executor_3:50056
    volumes:
      - ./order_executor/src:/app/order_executor/src
      - ./utils:/app/utils

  order_executor_2:
    build:
      context: .
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50055:50055"
    environment:
      - REPLICA_ID=2
      - REPLICA_PORT=50055
      - PYTHONUNBUFFERED=TRUE
      - PEERS=1:order_executor_1:50054,3:order_executor_3:50056
    volumes:
      - ./order_executor/src:/app/order_executor/src
      - ./utils:/app/utils
  order_executor_3:
    build:
      context: .
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50056:50056"
    environment:
      - REPLICA_ID=3
      - REPLICA_PORT=50056
      - PYTHONUNBUFFERED=TRUE
      - PEERS=1:order_executor_1:50054,2:order_executor_2:50055
    volumes:
      - ./order_executor/src:/app/order_executor/src
      - ./utils:/app/utils

  order_queue:
    build:
      context: ./
      dockerfile: ./order_queue/Dockerfile
    ports:
      - "50057:50057"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_queue/src/app.py
    volumes:
      - ./order_queue/src:/app/order_queue/src
      - ./utils:/app/utils

  payment_service:
    build:
      context: ./
      dockerfile: ./payment_service/Dockerfile
    ports:
      - "50058:50058"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PORT=50058
    volumes:
      - ./payment_service/src:/app/payment_service/src
      - ./utils:/app/utils
  
  books_primary:
    build:
      context: ./
      dockerfile: ./books_database/Dockerfile
    environment:
      - PYTHONFILE=/app/books_database/src/app.py
      - ROLE=primary
      - BACKUPS=books_backup_1:50061,books_backup_2:50062
    ports:
      - "50060:50060"
    volumes:
      - ./books_database/src:/app/books_database/src
      - ./utils:/app/utils

  books_backup_1:
    build:
      context: ./
      dockerfile: ./books_database/Dockerfile
    environment:
      - PYTHONFILE=/app/books_database/src/app.py
      - ROLE=backup
    ports:
      - "50061:50060"
    volumes:
      - ./books_database/src:/app/books_database/src
      - ./utils:/app/utils

  books_backup_2:
    build:
      context: ./
      dockerfile: ./books_database/Dockerfile
    environment:
      - PYTHONFILE=/app/books_database/src/app.py
      - ROLE=backup
    ports:
      - "50062:50060"
    volumes:
      - ./books_database/src:/app/books_database/src
      - ./utils:/app/utils